TODO
====

- Replace jquery and other js files that have been undoubtedly trashed during
  search and replace operations.
- Settle the testing question: py.test, nose, or both?
- Add an example featuring history states.
- Simplify the coding of states by using get_running_app(), and/or by adding
  references to app and/or statechart.
- Change long paths in super() calls to wrap across lines -- is there a way to
  do this without the explicit paths?
- Document the need to an __init__() for states, or not, in relation to Kivy
  properties.
- Document the use of memory mapping tools used in the attempt to get the
  Deflectouch_with_statecharts example working on iOS.
- Generate a state diagram in outline form, perhaps to /tmp/out.html for use
  in live reporting during development (See kotti_software tests for the dc()
  method).
- Are the installation docs in the readme OK?
- Review  # pragma: no cover tags.
- If initial_substate_key is None, use initial_substate_object (needs coding),
  and document usages for intitial substates set as string keys vs. objects.
- Also, fix other non-explicit state references, such as
  HistoryState.default_state, which is a string key, not an object, so should
  be changed to default_state_key.
- Would references such as initial_state_key, be better as initial_state_name?
- Is the stateObserver system used? Adapt for Kivy property bindings?
- Should uses of NameError be AttributeError?
- Change long strings to paren-bounded strings where needed.
- Reconsider the naming of the history state as InitialSubstate -- perhaps
  involve history in the name, e.g. InitialStateForHistory?
- Find calls to state_log_error() that are followed by a return, and replace
  them with raise Exception(msg) with a matching test.
- In state-tests/test_state_get_substate.py, a test for ambiguous results is
  commented out, on the basis that the python version return state X if it is
  a direct substate of A, regardless of whether a parellel state B also has a
  substate X. See also statechart-tests/test_statechart_get_state.py, where
  there are tests for ambiguity when getting states of the statechart -- but
  that is a broader context, so everything seems correct. However, the test
  that is commented out involves a callback -- is there functionality
  untested?
